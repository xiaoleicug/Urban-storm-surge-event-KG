# -*- coding: utf-8 -*-
from py2neo import Node, Graph, Relationship, Subgraph
import networkx as nx

import pandas as pd
import re
import numpy as np
from pandas import DataFrame

import Spatialcode
from polygon_geosoter.polygon_geosoter import (
    polygon_to_geosots,
    geosot_to_polygon,
    geosots_to_polygon,
    geosots_to_simple,
    spatial_relation_geosots_simple
)

class DataToNeo4j(object):
    graph = Graph("http://127.0.0.1//:7474", username="neo4j", password="xiaolei@226")

    def create_node(self):
        flood_Time=['2018-09-01T01:00:00.000000', '2018-09-01T02:00:00.000000', '2018-09-01T03:00:00.000000',
         '2018-09-01T04:00:00.000000', '2018-09-01T05:00:00.000000', '2018-09-01T06:00:00.000000',
         '2018-09-01T07:00:00.000000', '2018-09-01T08:00:00.000000', '2018-09-01T09:00:00.000000',
         '2018-09-01T10:00:00.000000', '2018-09-01T11:00:00.000000', '2018-09-01T12:00:00.000000',
         '2018-09-01T13:00:00.000000', '2018-09-01T14:00:00.000000', '2018-09-01T15:00:00.000000',
         '2018-09-01T16:00:00.000000', '2018-09-01T17:00:00.000000', '2018-09-01T18:00:00.000000',
         '2018-09-01T19:00:00.000000', '2018-09-01T20:00:00.000000', '2018-09-01T21:00:00.000000',
         '2018-09-01T22:00:00.000000', '2018-09-01T23:00:00.000000', '2018-09-02T00:00:00.000000',
         '2018-09-02T01:00:00.000000', '2018-09-02T02:00:00.000000', '2018-09-02T03:00:00.000000',
         '2018-09-02T04:00:00.000000', '2018-09-02T05:00:00.000000', '2018-09-02T06:00:00.000000',
         '2018-09-02T07:00:00.000000', '2018-09-02T08:00:00.000000', '2018-09-02T09:00:00.000000',
         '2018-09-02T10:00:00.000000', '2018-09-02T11:00:00.000000', '2018-09-02T12:00:00.000000',
         '2018-09-02T13:00:00.000000', '2018-09-02T14:00:00.000000', '2018-09-02T15:00:00.000000',
         '2018-09-02T16:00:00.000000', '2018-09-02T17:00:00.000000', '2018-09-02T18:00:00.000000',
         '2018-09-02T19:00:00.000000', '2018-09-02T20:00:00.000000', '2018-09-02T21:00:00.000000',
         '2018-09-02T22:00:00.000000', '2018-09-02T23:00:00.000000', '2018-09-03T00:00:00.000000',
         '2018-09-03T01:00:00.000000', '2018-09-03T02:00:00.000000', '2018-09-03T03:00:00.000000',
         '2018-09-03T04:00:00.000000', '2018-09-03T05:00:00.000000', '2018-09-03T06:00:00.000000',
         '2018-09-03T07:00:00.000000', '2018-09-03T08:00:00.000000', '2018-09-03T09:00:00.000000',
         '2018-09-03T10:00:00.000000', '2018-09-03T11:00:00.000000', '2018-09-03T12:00:00.000000',
         '2018-09-03T13:00:00.000000', '2018-09-03T14:00:00.000000', '2018-09-03T15:00:00.000000',
         '2018-09-03T16:00:00.000000', '2018-09-03T17:00:00.000000', '2018-09-03T18:00:00.000000',
         '2018-09-03T19:00:00.000000', '2018-09-03T20:00:00.000000', '2018-09-03T21:00:00.000000',
         '2018-09-03T22:00:00.000000', '2018-09-03T23:00:00.000000', '2018-09-04T00:00:00.000000',
         '2018-09-04T01:00:00.000000', '2018-09-04T02:00:00.000000', '2018-09-04T03:00:00.000000',
         '2018-09-04T04:00:00.000000', '2018-09-04T05:00:00.000000', '2018-09-04T06:00:00.000000',
         '2018-09-04T07:00:00.000000', '2018-09-04T08:00:00.000000', '2018-09-04T09:00:00.000000',
         '2018-09-04T10:00:00.000000', '2018-09-04T11:00:00.000000', '2018-09-04T12:00:00.000000',
         '2018-09-04T13:00:00.000000', '2018-09-04T14:00:00.000000', '2018-09-04T15:00:00.000000',
         '2018-09-04T16:00:00.000000', '2018-09-04T17:00:00.000000', '2018-09-04T18:00:00.000000',
         '2018-09-04T19:00:00.000000', '2018-09-04T20:00:00.000000', '2018-09-04T21:00:00.000000',
         '2018-09-04T22:00:00.000000', '2018-09-04T23:00:00.000000', '2018-09-05T00:00:00.000000',
         '2018-09-05T01:00:00.000000', '2018-09-05T02:00:00.000000', '2018-09-05T03:00:00.000000',
         '2018-09-05T04:00:00.000000', '2018-09-05T05:00:00.000000', '2018-09-05T06:00:00.000000',
         '2018-09-05T07:00:00.000000', '2018-09-05T08:00:00.000000', '2018-09-05T09:00:00.000000',
         '2018-09-05T10:00:00.000000', '2018-09-05T11:00:00.000000', '2018-09-05T12:00:00.000000',
         '2018-09-05T13:00:00.000000', '2018-09-05T14:00:00.000000', '2018-09-05T15:00:00.000000',
         '2018-09-05T16:00:00.000000', '2018-09-05T17:00:00.000000', '2018-09-05T18:00:00.000000',
         '2018-09-05T19:00:00.000000', '2018-09-05T20:00:00.000000', '2018-09-05T21:00:00.000000',
         '2018-09-05T22:00:00.000000', '2018-09-05T23:00:00.000000', '2018-09-06T00:00:00.000000',
         '2018-09-06T01:00:00.000000', '2018-09-06T02:00:00.000000', '2018-09-06T03:00:00.000000',
         '2018-09-06T04:00:00.000000', '2018-09-06T05:00:00.000000', '2018-09-06T06:00:00.000000',
         '2018-09-06T07:00:00.000000', '2018-09-06T08:00:00.000000', '2018-09-06T09:00:00.000000',
         '2018-09-06T10:00:00.000000', '2018-09-06T11:00:00.000000', '2018-09-06T12:00:00.000000',
         '2018-09-06T13:00:00.000000', '2018-09-06T14:00:00.000000', '2018-09-06T15:00:00.000000',
         '2018-09-06T16:00:00.000000', '2018-09-06T17:00:00.000000', '2018-09-06T18:00:00.000000',
         '2018-09-06T19:00:00.000000', '2018-09-06T20:00:00.000000', '2018-09-06T21:00:00.000000',
         '2018-09-06T22:00:00.000000', '2018-09-06T23:00:00.000000', '2018-09-07T00:00:00.000000',
         '2018-09-07T01:00:00.000000', '2018-09-07T02:00:00.000000', '2018-09-07T03:00:00.000000',
         '2018-09-07T04:00:00.000000', '2018-09-07T05:00:00.000000', '2018-09-07T06:00:00.000000',
         '2018-09-07T07:00:00.000000', '2018-09-07T08:00:00.000000', '2018-09-07T09:00:00.000000',
         '2018-09-07T10:00:00.000000', '2018-09-07T11:00:00.000000', '2018-09-07T12:00:00.000000',
         '2018-09-07T13:00:00.000000', '2018-09-07T14:00:00.000000', '2018-09-07T15:00:00.000000',
         '2018-09-07T16:00:00.000000', '2018-09-07T17:00:00.000000', '2018-09-07T18:00:00.000000',
         '2018-09-07T19:00:00.000000', '2018-09-07T20:00:00.000000', '2018-09-07T21:00:00.000000',
         '2018-09-07T22:00:00.000000', '2018-09-07T23:00:00.000000', '2018-09-08T00:00:00.000000',
         '2018-09-08T01:00:00.000000', '2018-09-08T02:00:00.000000', '2018-09-08T03:00:00.000000',
         '2018-09-08T04:00:00.000000', '2018-09-08T05:00:00.000000', '2018-09-08T06:00:00.000000',
         '2018-09-08T07:00:00.000000', '2018-09-08T08:00:00.000000', '2018-09-08T09:00:00.000000',
         '2018-09-08T10:00:00.000000', '2018-09-08T11:00:00.000000', '2018-09-08T12:00:00.000000',
         '2018-09-08T13:00:00.000000', '2018-09-08T14:00:00.000000', '2018-09-08T15:00:00.000000',
         '2018-09-08T16:00:00.000000', '2018-09-08T17:00:00.000000', '2018-09-08T18:00:00.000000',
         '2018-09-08T19:00:00.000000', '2018-09-08T20:00:00.000000', '2018-09-08T21:00:00.000000',
         '2018-09-08T22:00:00.000000', '2018-09-08T23:00:00.000000', '2018-09-09T00:00:00.000000',
         '2018-09-09T01:00:00.000000', '2018-09-09T02:00:00.000000', '2018-09-09T03:00:00.000000',
         '2018-09-09T04:00:00.000000', '2018-09-09T05:00:00.000000', '2018-09-09T06:00:00.000000',
         '2018-09-09T07:00:00.000000', '2018-09-09T08:00:00.000000', '2018-09-09T09:00:00.000000',
         '2018-09-09T10:00:00.000000', '2018-09-09T11:00:00.000000', '2018-09-09T12:00:00.000000',
         '2018-09-09T13:00:00.000000', '2018-09-09T14:00:00.000000', '2018-09-09T15:00:00.000000',
         '2018-09-09T16:00:00.000000', '2018-09-09T17:00:00.000000', '2018-09-09T18:00:00.000000',
         '2018-09-09T19:00:00.000000', '2018-09-09T20:00:00.000000', '2018-09-09T21:00:00.000000',
         '2018-09-09T22:00:00.000000', '2018-09-09T23:00:00.000000', '2018-09-10T00:00:00.000000',
         '2018-09-10T01:00:00.000000', '2018-09-10T02:00:00.000000', '2018-09-10T03:00:00.000000',
         '2018-09-10T04:00:00.000000', '2018-09-10T05:00:00.000000', '2018-09-10T06:00:00.000000',
         '2018-09-10T07:00:00.000000', '2018-09-10T08:00:00.000000', '2018-09-10T09:00:00.000000',
         '2018-09-10T10:00:00.000000', '2018-09-10T11:00:00.000000', '2018-09-10T12:00:00.000000',
         '2018-09-10T13:00:00.000000', '2018-09-10T14:00:00.000000', '2018-09-10T15:00:00.000000',
         '2018-09-10T16:00:00.000000', '2018-09-10T17:00:00.000000', '2018-09-10T18:00:00.000000',
         '2018-09-10T19:00:00.000000', '2018-09-10T20:00:00.000000', '2018-09-10T21:00:00.000000',
         '2018-09-10T22:00:00.000000', '2018-09-10T23:00:00.000000', '2018-09-11T00:00:00.000000',
         '2018-09-11T01:00:00.000000', '2018-09-11T02:00:00.000000', '2018-09-11T03:00:00.000000',
         '2018-09-11T04:00:00.000000', '2018-09-11T05:00:00.000000', '2018-09-11T06:00:00.000000',
         '2018-09-11T07:00:00.000000', '2018-09-11T08:00:00.000000', '2018-09-11T09:00:00.000000',
         '2018-09-11T10:00:00.000000', '2018-09-11T11:00:00.000000', '2018-09-11T12:00:00.000000',
         '2018-09-11T13:00:00.000000', '2018-09-11T14:00:00.000000', '2018-09-11T15:00:00.000000',
         '2018-09-11T16:00:00.000000', '2018-09-11T17:00:00.000000', '2018-09-11T18:00:00.000000',
         '2018-09-11T19:00:00.000000', '2018-09-11T20:00:00.000000', '2018-09-11T21:00:00.000000',
         '2018-09-11T22:00:00.000000', '2018-09-11T23:00:00.000000', '2018-09-12T00:00:00.000000',
         '2018-09-12T01:00:00.000000', '2018-09-12T02:00:00.000000', '2018-09-12T03:00:00.000000',
         '2018-09-12T04:00:00.000000', '2018-09-12T05:00:00.000000', '2018-09-12T06:00:00.000000',
         '2018-09-12T07:00:00.000000', '2018-09-12T08:00:00.000000', '2018-09-12T09:00:00.000000',
         '2018-09-12T10:00:00.000000', '2018-09-12T11:00:00.000000', '2018-09-12T12:00:00.000000',
         '2018-09-12T13:00:00.000000', '2018-09-12T14:00:00.000000', '2018-09-12T15:00:00.000000',
         '2018-09-12T16:00:00.000000', '2018-09-12T17:00:00.000000', '2018-09-12T18:00:00.000000',
         '2018-09-12T19:00:00.000000', '2018-09-12T20:00:00.000000', '2018-09-12T21:00:00.000000',
         '2018-09-12T22:00:00.000000', '2018-09-12T23:00:00.000000', '2018-09-13T00:00:00.000000',
         '2018-09-13T01:00:00.000000', '2018-09-13T02:00:00.000000', '2018-09-13T03:00:00.000000',
         '2018-09-13T04:00:00.000000', '2018-09-13T05:00:00.000000', '2018-09-13T06:00:00.000000',
         '2018-09-13T07:00:00.000000', '2018-09-13T08:00:00.000000', '2018-09-13T09:00:00.000000',
         '2018-09-13T10:00:00.000000', '2018-09-13T11:00:00.000000', '2018-09-13T12:00:00.000000',
         '2018-09-13T13:00:00.000000', '2018-09-13T14:00:00.000000', '2018-09-13T15:00:00.000000',
         '2018-09-13T16:00:00.000000', '2018-09-13T17:00:00.000000', '2018-09-13T18:00:00.000000',
         '2018-09-13T19:00:00.000000', '2018-09-13T20:00:00.000000', '2018-09-13T21:00:00.000000',
         '2018-09-13T22:00:00.000000', '2018-09-13T23:00:00.000000', '2018-09-14T00:00:00.000000',
         '2018-09-14T01:00:00.000000', '2018-09-14T02:00:00.000000', '2018-09-14T03:00:00.000000',
         '2018-09-14T04:00:00.000000', '2018-09-14T05:00:00.000000', '2018-09-14T06:00:00.000000',
         '2018-09-14T07:00:00.000000', '2018-09-14T08:00:00.000000', '2018-09-14T09:00:00.000000',
         '2018-09-14T10:00:00.000000', '2018-09-14T11:00:00.000000', '2018-09-14T12:00:00.000000',
         '2018-09-14T13:00:00.000000', '2018-09-14T14:00:00.000000', '2018-09-14T15:00:00.000000',
         '2018-09-14T16:00:00.000000', '2018-09-14T17:00:00.000000', '2018-09-14T18:00:00.000000',
         '2018-09-14T19:00:00.000000', '2018-09-14T20:00:00.000000', '2018-09-14T21:00:00.000000',
         '2018-09-14T22:00:00.000000', '2018-09-14T23:00:00.000000', '2018-09-15T00:00:00.000000',
         '2018-09-15T01:00:00.000000', '2018-09-15T02:00:00.000000', '2018-09-15T03:00:00.000000',
         '2018-09-15T04:00:00.000000', '2018-09-15T05:00:00.000000', '2018-09-15T06:00:00.000000',
         '2018-09-15T07:00:00.000000', '2018-09-15T08:00:00.000000', '2018-09-15T09:00:00.000000',
         '2018-09-15T10:00:00.000000', '2018-09-15T11:00:00.000000', '2018-09-15T12:00:00.000000',
         '2018-09-15T13:00:00.000000', '2018-09-15T14:00:00.000000', '2018-09-15T15:00:00.000000',
         '2018-09-15T16:00:00.000000', '2018-09-15T17:00:00.000000', '2018-09-15T18:00:00.000000',
         '2018-09-15T19:00:00.000000', '2018-09-15T20:00:00.000000', '2018-09-15T21:00:00.000000',
         '2018-09-15T22:00:00.000000', '2018-09-15T23:00:00.000000', '2018-09-16T00:00:00.000000',
         '2018-09-16T01:00:00.000000', '2018-09-16T02:00:00.000000', '2018-09-16T03:00:00.000000',
         '2018-09-16T04:00:00.000000', '2018-09-16T05:00:00.000000', '2018-09-16T06:00:00.000000',
         '2018-09-16T07:00:00.000000', '2018-09-16T08:00:00.000000', '2018-09-16T09:00:00.000000',
         '2018-09-16T10:00:00.000000', '2018-09-16T11:00:00.000000', '2018-09-16T12:00:00.000000',
         '2018-09-16T13:00:00.000000', '2018-09-16T14:00:00.000000', '2018-09-16T15:00:00.000000',
         '2018-09-16T16:00:00.000000', '2018-09-16T17:00:00.000000', '2018-09-16T18:00:00.000000',
         '2018-09-16T19:00:00.000000', '2018-09-16T20:00:00.000000', '2018-09-16T21:00:00.000000',
         '2018-09-16T22:00:00.000000', '2018-09-16T23:00:00.000000', '2018-09-17T00:00:00.000000',
         '2018-09-17T01:00:00.000000', '2018-09-17T02:00:00.000000', '2018-09-17T03:00:00.000000',
         '2018-09-17T04:00:00.000000', '2018-09-17T05:00:00.000000', '2018-09-17T06:00:00.000000',
         '2018-09-17T07:00:00.000000', '2018-09-17T08:00:00.000000', '2018-09-17T09:00:00.000000',
         '2018-09-17T10:00:00.000000', '2018-09-17T11:00:00.000000', '2018-09-17T12:00:00.000000',
         '2018-09-17T13:00:00.000000', '2018-09-17T14:00:00.000000', '2018-09-17T15:00:00.000000',
         '2018-09-17T16:00:00.000000', '2018-09-17T17:00:00.000000', '2018-09-17T18:00:00.000000',
         '2018-09-17T19:00:00.000000', '2018-09-17T20:00:00.000000', '2018-09-17T21:00:00.000000',
         '2018-09-17T22:00:00.000000', '2018-09-17T23:00:00.000000', '2018-09-18T00:00:00.000000',
         '2018-09-18T01:00:00.000000', '2018-09-18T02:00:00.000000', '2018-09-18T03:00:00.000000',
         '2018-09-18T04:00:00.000000', '2018-09-18T05:00:00.000000', '2018-09-18T06:00:00.000000',
         '2018-09-18T07:00:00.000000', '2018-09-18T08:00:00.000000', '2018-09-18T09:00:00.000000',
         '2018-09-18T10:00:00.000000', '2018-09-18T11:00:00.000000', '2018-09-18T12:00:00.000000',
         '2018-09-18T13:00:00.000000', '2018-09-18T14:00:00.000000', '2018-09-18T15:00:00.000000',
         '2018-09-18T16:00:00.000000', '2018-09-18T17:00:00.000000', '2018-09-18T18:00:00.000000',
         '2018-09-18T19:00:00.000000', '2018-09-18T20:00:00.000000', '2018-09-18T21:00:00.000000',
         '2018-09-18T22:00:00.000000', '2018-09-18T23:00:00.000000', '2018-09-19T00:00:00.000000']


        Time_codes = [3833868287, 3833876479, 3833884671, 3833892863, 3833901055, 3833909247, 3833917439, 3833925631, 3833933823, 3833942015, 3833950207, 3833958399, 3833966591, 3833974783, 3833982975, 3833991167, 3833999359, 3834007551, 3834015743, 3834023935, 3834032127, 3834040319, 3834048511, 3834122239, 3834130431, 3834138623, 3834146815, 3834155007, 3834163199, 3834171391, 3834179583, 3834187775, 3834195967, 3834204159, 3834212351, 3834220543, 3834228735, 3834236927, 3834245119, 3834253311, 3834261503, 3834269695, 3834277887, 3834286079, 3834294271, 3834302463, 3834310655, 3834384383, 3834392575, 3834400767, 3834408959, 3834417151, 3834425343, 3834433535, 3834441727, 3834449919, 3834458111, 3834466303, 3834474495, 3834482687, 3834490879, 3834499071, 3834507263, 3834515455, 3834523647, 3834531839, 3834540031, 3834548223, 3834556415, 3834564607, 3834572799, 3834646527, 3834654719, 3834662911, 3834671103, 3834679295, 3834687487, 3834695679, 3834703871, 3834712063, 3834720255, 3834728447, 3834736639, 3834744831, 3834753023, 3834761215, 3834769407, 3834777599, 3834785791, 3834793983, 3834802175, 3834810367, 3834818559, 3834826751, 3834834943, 3834908671, 3834916863, 3834925055, 3834933247, 3834941439, 3834949631, 3834957823, 3834966015, 3834974207, 3834982399, 3834990591, 3834998783, 3835006975, 3835015167, 3835023359, 3835031551, 3835039743, 3835047935, 3835056127, 3835064319, 3835072511, 3835080703, 3835088895, 3835097087, 3835170815, 3835179007, 3835187199, 3835195391, 3835203583, 3835211775, 3835219967, 3835228159, 3835236351, 3835244543, 3835252735, 3835260927, 3835269119, 3835277311, 3835285503, 3835293695, 3835301887, 3835310079, 3835318271, 3835326463, 3835334655, 3835342847, 3835351039, 3835359231, 3835432959, 3835441151, 3835449343, 3835457535, 3835465727, 3835473919, 3835482111, 3835490303, 3835498495, 3835506687, 3835514879, 3835523071, 3835531263, 3835539455, 3835547647, 3835555839, 3835564031, 3835572223, 3835580415, 3835588607, 3835596799, 3835604991, 3835613183, 3835621375, 3835695103, 3835703295, 3835711487, 3835719679, 3835727871, 3835736063, 3835744255, 3835752447, 3835760639, 3835768831, 3835777023, 3835785215, 3835793407, 3835801599, 3835809791, 3835817983, 3835826175, 3835834367, 3835842559, 3835850751, 3835858943, 3835867135, 3835875327, 3835883519, 3835957247, 3835965439, 3835973631, 3835981823, 3835990015, 3835998207, 3836006399, 3836014591, 3836022783, 3836030975, 3836039167, 3836047359, 3836055551, 3836063743, 3836071935, 3836080127, 3836088319, 3836096511, 3836104703, 3836112895, 3836121087, 3836129279, 3836137471, 3836145663, 3836219391, 3836227583, 3836235775, 3836243967, 3836252159, 3836260351, 3836268543, 3836276735, 3836284927, 3836293119, 3836301311, 3836309503, 3836317695, 3836325887, 3836334079, 3836342271, 3836350463, 3836358655, 3836366847, 3836375039, 3836383231, 3836391423, 3836399615, 3836407807, 3836481535, 3836489727, 3836497919, 3836506111, 3836514303, 3836522495, 3836530687, 3836538879, 3836547071, 3836555263, 3836563455, 3836571647, 3836579839, 3836588031, 3836596223, 3836604415, 3836612607, 3836620799, 3836628991, 3836637183, 3836645375, 3836653567, 3836661759, 3836669951, 3836743679, 3836751871, 3836760063, 3836768255, 3836776447, 3836784639, 3836792831, 3836801023, 3836809215, 3836817407, 3836825599, 3836833791, 3836841983, 3836850175, 3836858367, 3836866559, 3836874751, 3836882943, 3836891135, 3836899327, 3836907519, 3836915711, 3836923903, 3836932095, 3837005823, 3837014015, 3837022207, 3837030399, 3837038591, 3837046783, 3837054975, 3837063167, 3837071359, 3837079551, 3837087743, 3837095935, 3837104127, 3837112319, 3837120511, 3837128703, 3837136895, 3837145087, 3837153279, 3837161471, 3837169663, 3837177855, 3837186047, 3837194239, 3837267967, 3837276159, 3837284351, 3837292543, 3837300735, 3837308927, 3837317119, 3837325311, 3837333503, 3837341695, 3837349887, 3837358079, 3837366271, 3837374463, 3837382655, 3837390847, 3837399039, 3837407231, 3837415423, 3837423615, 3837431807, 3837439999, 3837448191, 3837456383, 3837530111, 3837538303, 3837546495, 3837554687, 3837562879, 3837571071, 3837579263, 3837587455, 3837595647, 3837603839, 3837612031, 3837620223, 3837628415, 3837636607, 3837644799, 3837652991, 3837661183, 3837669375, 3837677567, 3837685759, 3837693951, 3837702143, 3837710335, 3837718527, 3837792255, 3837800447, 3837808639, 3837816831, 3837825023, 3837833215, 3837841407, 3837849599, 3837857791, 3837865983, 3837874175, 3837882367, 3837890559, 3837898751, 3837906943, 3837915135, 3837923327, 3837931519, 3837939711, 3837947903, 3837956095, 3837964287, 3837972479, 3837980671, 3838054399, 3838062591, 3838070783, 3838078975, 3838087167, 3838095359, 3838103551, 3838111743, 3838119935, 3838128127, 3838136319, 3838144511, 3838152703, 3838160895, 3838169087, 3838177279, 3838185471, 3838193663, 3838201855, 3838210047, 3838218239, 3838226431, 3838234623, 3838242815, 3838316543, 3838324735, 3838332927, 3838341119, 3838349311, 3838357503, 3838365695, 3838373887, 3838382079, 3838390271, 3838398463, 3838406655, 3838414847, 3838423039, 3838431231, 3838439423, 3838447615, 3838455807, 3838463999, 3838472191, 3838480383, 3838488575, 3838496767, 3838504959, 3838578687]
        # for i in range(0,len(Time_codes)):
        #     self.graph.run("create (:Time{Time_code:"+str(Time_codes[i])+"})")

        for i in range(0,len(Time_codes)-1):
            self.graph.run("match (n1:Time{Time_code:"+str(Time_codes[i])+"}), (n2:Time{Time_code:"+str(Time_codes[i+1])+"}) create (n1)-[r:next]->(n2)")


    def create_nodeandrelation(self):
        flood_grid_nodes=self.graph.run("MATCH (n:flood_grid) where n.Level=\"I\" RETURN n").data()
        #nodes = []
        #rels = []
        i=0
        for f_n in flood_grid_nodes:
            f_mgcode = f_n['n']['GeoSOT_string']
            f_timecode = f_n['n']['Timecode_int']

            e1=f_n['n']

            Pop_nodes = self.graph.run("MATCH (n:Population_grid) where n.GeoSOT_string =~ \'"+f_mgcode+".*\' return n").data()
            e22=self.graph.run("MATCH (t:Time{Time_code:"+f_timecode+"}) return t").data()[0]['t']
            nodes = []
            rels = []
            nodes.append(e22)
            for pop_node in Pop_nodes:
                e2 = pop_node['n']

                #self.graph.create(rel)
                e11 = Node("People_trapped",count=e2['Population_count'])
                rel = Relationship(e11, 'caused_by', e1)
                nodes.append(e2)
                nodes.append(e11)
                rel1 = Relationship(e11, "has_influenced",e2)
                rel2 = Relationship(e11,'at_Time',e22)
                rels.append(rel)
                rels.append(rel1)
                rels.append(rel2)
                #self.graph.create(rel1)
                #self.graph.create(rel2)
            i=i+1
            print(i)
            subgraph = Subgraph(nodes, rels)
            tx = self.graph.begin()
            tx.create(subgraph)
            tx.commit()


    def create_Subway_relation(self):
        flood_grid_nodes = self.graph.run("MATCH (n:flood_grid) where n.Level=\"I\" or n.Level=\"II\" RETURN n").data()
        # nodes = []
        # rels = []
        i = 0
        for f_n in flood_grid_nodes:
            f_mgcode = f_n['n']['GeoSOT_string']
            f_timecode = f_n['n']['Timecode_int']
            e1 = f_n['n']
            Subway_nodes = self.graph.run(
                "MATCH (n:Subway_entry) where n.GeoSOT_string =~ \'" + f_mgcode + ".*\' return n").data()
            e22 = self.graph.run("MATCH (t:Time{Time_code:" + f_timecode + "}) return t").data()[0]['t']
            for subway_node in Subway_nodes:
                e2 = subway_node['n']

                e11 = Node("Subway_entry_flooded",flooded_depth=float(e1['Depth']))
                rel1 = Relationship(e11, "has_influenced", e2)
                rel2 = Relationship(e11, 'at_Time', e22)
                rel = Relationship(e11, 'caused_by', e1)
                self.graph.create(rel)
                self.graph.create(rel1)
                self.graph.create(rel2)
                i = i + 1
                print(i)

    def create_relation_flood(self):
        with open("./Test/flood_disnode_target_level.txt","r",encoding="utf-8") as f_flood:
            flood_lines = f_flood.readlines()
        with open("./Test/Building_simple.txt","r",encoding="utf-8") as f_building:
            building_lines = f_building.readlines()
        with open("./Test/Road_simple.txt", "r", encoding="utf-8") as f_road:
            road_lines = f_road.readlines()
        for line in flood_lines:
            flood_geosot = line.split("\t")[0]
            flood_geosot_group = eval(line.split("\t")[1].strip())
            nodes = []
            rels = []
            for l1 in building_lines:
                building_geosot_group =eval(l1.split("\t")[1].strip())
                rel = spatial_relation_geosots_simple(flood_geosot_group,building_geosot_group)[1]
                if rel == "contains" or rel=="overlap":
                    print(rel)
                    build_No = l1.split("\t")[0]
                    f_nodes = self.graph.run("MATCH (n:flood_grid{GeoSOT_string:\"" + flood_geosot + "\",Flood_level:\"I\"}) RETURN n").data()

                    e2 = self.graph.run("MATCH (n:Building) where n.Building_No=\"" + build_No + "\" RETURN n").data()[0]['n']
                    nodes.append(e2)
                    for f_node in f_nodes:
                        f_timecode = f_node['n']['Timecode_int']
                        e11 = Node("Building_flooded", flooded_depth=float(f_node['n']['Depth']))
                        e22 = self.graph.run("MATCH (t:Time{Time_code:" + f_timecode + "}) return t").data()[0]['t']
                        nodes.append(e11)
                        nodes.append(e22)
                        rel1 = Relationship(e11, "has_influenced", e2)
                        rel2 = Relationship(e11, 'at_Time', e22)
                        rels.append(rel1)
                        rels.append(rel2)
                    # Rel = Relationship(e1, rel, e2)
                    # self.graph.create(Rel)
            if len(rels)!=0:
                subgraph = Subgraph(nodes, rels)
                tx = self.graph.begin()
                tx.create(subgraph)
                tx.commit()
            print("end 1!\n")
            nodes = []
            rels = []
            for l2 in road_lines:
                road_geosot_group = eval(l2.split("\t")[1].strip())
                rel = spatial_relation_geosots_simple(flood_geosot_group, road_geosot_group)[1]
                if rel == 'contains' or rel == 'overlap':
                    print(rel)
                    road_No = l2.split("\t")[0]
                    f_nodes = self.graph.run("MATCH (n:flood_grid{GeoSOT_string:\"" + flood_geosot + "\"}) RETURN n").data()
                    e2 = self.graph.run("MATCH (n:Road) where n.Road_No=\"" + road_No + "\" RETURN n").data()[0][
                        'n']
                    nodes.append(e2)
                    for f_node in f_nodes:
                        f_timecode = f_node['n']['Timecode_int']
                        e11 = Node("Road_flooded", flooded_depth=float(f_node['n']['Depth']))
                        e22 = self.graph.run("MATCH (t:Time{Time_code:" + f_timecode + "}) return t").data()[0]['t']
                        nodes.append(e11)
                        nodes.append(e22)
                        rel1 = Relationship(e11, "locate_at", e2)
                        rel2 = Relationship(e11, 'at_Time', e22)
                        rels.append(rel1)
                        rels.append(rel2)
            if len(rels) != 0:
                print("test!!!")
                print(len(rels))

                subgraph = Subgraph(nodes, rels)
                #nx.draw(subgraph)
                tx = self.graph.begin()
                tx.create(subgraph)
                tx.commit()
                # if rel=='contains' or rel=='overlap':
                #     e1 = self.graph.run("MATCH (n:flood_grid{GeoSOT_string:"+flood_geosot+"}) RETURN n").data()['n']
                #     e2 = self.graph.run("MATCH (n:Road) where n.GeoSOT_string_group=" + line.split("\t")[
                #         -1].strip() + " RETURN n").data()['n']
                #     Rel = Relationship(e1, rel, e2)
                #     self.graph.create(Rel)
            print("end 2!\n")
        f_flood.close()
        f_road.close()
        f_building.close()




if __name__ == '__main__':
    data_neo4j = DataToNeo4j()
    #data_neo4j.create_relation()
    #data_neo4j.create_relation_flood()
    #data_neo4j.create_node()
    data_neo4j.create_nodeandrelation()
    #data_neo4j.create_Subway_relation()


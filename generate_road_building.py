import unittest

from polygon_geosoter.polygon_geosoter import (
    polygon_to_geosots,
    geosot_to_polygon,
    geosots_to_polygon,
    geosots_to_simple,
    spatial_relation_geosots_simple,
    simple_to_geosots
)
from shapely import geometry
from shapely import wkt
from Spatialcode import *
import clr

clr.AddReference('GeoSOT')
from GeoSOT import *

def test_triangle():
    test_polygon = geometry.Polygon(
        [
            (-99.1795917, 19.432134),
            (-99.1656847, 19.429034),
            (-99.1776492, 19.414236),
            (-99.1795917, 19.432134),
        ]
    )

    polygon = geosots_to_polygon(polygon_to_geosots(test_polygon, 20))
    print(polygon)
    # self.assertTrue(polygon.area <= test_polygon.area)
    # self.assertTrue(
    #     all(polygon.covers(geometry.Point(c)) for c in polygon.boundary.coords)
    # )

    polygon = geosots_to_polygon(polygon_to_geosots(test_polygon, 19, True))
    print(polygon)
    simple_polygon = geosots_to_simple(polygon_to_geosots(test_polygon, 19, True))
    fp = open('Test_Polygoninner.txt','w')
    fp.write("name:polygon\n")
    fp.write("outer_polygon:"+str(polygon))
    fp.close()
    print(simple_polygon)

    # self.assertTrue(polygon.area >= test_polygon.area)

def test_landslide():
    i = 0
    with open("landslide.txt","r") as f:
        lines = f.readlines()
    line = lines[1]
    polygon = line.split("\t")[0]
    Landslide_P=wkt.loads(polygon)
    print(Landslide_P)

    polygon_After = geosots_to_polygon(polygon_to_geosots(Landslide_P, 26,False))
    simple_polygon_After = geosots_to_simple(polygon_to_geosots(Landslide_P, 26,False))
    fp = open('Test_Landslide_Polygon_outer.txt', 'w')
    fp.write("name:polygon\n")
    fp.write("outer_landslide_polygon:" + str(polygon_After))
    fp.close()
    print(simple_polygon_After)
    polygon_After = geosots_to_polygon(polygon_to_geosots(Landslide_P, 26))
    simple_polygon_After = geosots_to_simple(polygon_to_geosots(Landslide_P, 26))
    fp = open('Test_Landslide_Polygon_inner.txt', 'w')
    fp.write("name:polygon\n")
    fp.write("inner_landslide_polygon:" + str(polygon_After))
    fp.close()
    print(simple_polygon_After)

def test_building():
    with open("Building.txt","r",encoding="utf-8") as f:
        lines = f.readlines()
    buildings = []
    fp = open("Test_Building_Polygons.txt","w",encoding="utf-8")
    fp.write("ID:polygon:name\n")
    id = 0
    for line in lines[1:]:
        building = []
        list = line.split("\t")
        p = list[0]
        b_p = wkt.loads(p)
        if len(list)<4:
            name="NULL"
        else:
            name = list[3].strip("\n")

        polygon_After = geosots_to_polygon(polygon_to_geosots(b_p, 22,inner=False))
        simple_polygon_After = geosots_to_simple(polygon_to_geosots(b_p, 22,inner=False))
        #print(simple_polygon_After)
        building.append(simple_polygon_After)
        building.append(name)
        #print(str(id))
        fp.write(str(id)+":"+str(polygon_After)+":"+name)
        fp.write("\n")
        id = id + 1
        buildings.append(building)
    fp.close()
    # G_A = buildings[0]
    # G_B = buildings[1]
    # print(spatial_relation_geosots_simple(G_A,G_B))
    with open("Building_simple.txt","w",encoding="utf-8") as f:
        i = 0
        for id in range(0,len(buildings)):
            f.write(str(id)+"\t")
            f.write(str(buildings[id][0])+"\t")
            f.write(buildings[id][1])
            f.write("\n")
            i = i + 1
    return buildings

def test_road():
    with open("Road_zhugandao.txt","r",encoding="utf-8") as f:
        lines = f.readlines()
    roads = []
    #roads_fclass = []
    #roads_name = []
    fp = open("Test_Road_Polygons.txt","w",encoding="utf-8")
    fp.write("ID:polygon:fclass:name:bridge:tunnel\n")
    id = 0
    for line in lines[1:]:
        road = []
        p = line.split("\t")[0]
        fclass = line.split("\t")[3]
        name = line.split("\t")[4]
        bridge = line.split("\t")[9]
        tunnel = line.split("\t")[10]
        r_p = wkt.loads(p)
        geosots = polygon_to_geosots(r_p, 22,inner=False)
        print(geosots)
        polygon_After = geosots_to_polygon(geosots)
        simple_polygon_After = geosots_to_simple(geosots)
        #print(simple_polygon_After)
        road.append(simple_polygon_After)
        road.append(fclass)
        road.append(name)
        road.append(bridge)
        road.append(tunnel)
        #print(str(id))
        fp.write(str(id)+":"+str(polygon_After)+":"+fclass+":"+name)
        fp.write("\n")
        id = id + 1
        roads.append(road)
    fp.close()
    # G_A = buildings[0]
    # G_B = buildings[1]
    # print(spatial_relation_geosots_simple(G_A,G_B))
    with open("Road_simple.txt","w",encoding="utf-8") as f:
        i = 0
        for id in range(0,len(roads)):
            f.write(str(id)+"\t")
            f.write(str(roads[id][0])+"\t")
            f.write(roads[id][1]+"\t")
            f.write(roads[id][2]+"\t")
            f.write(roads[id][3] + "\t")
            f.write(roads[id][4])
            f.write("\n")
            i = i + 1
    return roads

def test_Shenzhen():
    with open("E:\\GeohazardsKG\\Typhoon_Shenzhen_KG\\Shenzhen_prov\\深圳_省界_polygon.txt","r") as f:
        lines = f.readlines()
    geosots = set()
    for line in lines[1:]:
        p = line.split("\t")[0]
        polygon = wkt.loads(p)
        geosots=geosots|polygon_to_geosots(polygon,13,False)
    fp = open("Test_Shenzhen_Polygons.txt", "w")
    fp.write("ID:polygon:geo_string:geocode\n")
    id = 0
    for geo in geosots:
        polygon = geosot_to_polygon(geo)
        if polygon.area<=32*32*1000000:
            Mgcode = get_Spatialcode(Tile(geo).gcode,13)
            fp.write(str(id) + ":" + str(polygon)+":"+geo+":"+str(Mgcode))
            fp.write("\n")
            id = id+1
        else:
            print(id)
    fp.close()
    # geosots = set()
    # for line in lines[1:]:
    #     p = line.split("\t")[0]
    #     polygon = wkt.loads(p)
    #     geosots = geosots | polygon_to_geosots(polygon, 19, False)
    # fp = open("Test_Shenzhen_Polygons.txt", "w")
    # fp.write("ID:polygon:geo_string:geocode\n")
    # id = 0
    # for geo in geosots:
    #     polygon = geosot_to_polygon(geo)
    #     if polygon.area <= 14100:
    #         Mgcode = get_Spatialcode(Tile(geo).gcode, 19)
    #         fp.write(str(id) + ":" + str(polygon) + ":" + geo + ":" + str(Mgcode))
    #         fp.write("\n")
    #         id = id + 1
    #     else:
    #         print(id)
    # fp.close()
def test_Shenzhen_distincts():
    with open("宝安_polygon.txt", "r", encoding='utf-8') as f:
        lines = f.readlines()
    geosots = set()
    for line in lines[1:]:
        p = line.split("\t")[0]
        polygon = wkt.loads(p)
        geosots=geosots|polygon_to_geosots(polygon,17,False)
        simple_polygon = geosots_to_simple(geosots)
    fp = open("Test_Shenzhen_Polygons_baoan_22.txt", "w")
    fp.write("ID:polygon:geo_string:geocode\n")
    id = 0
    for geo in geosots:
        polygon = geosot_to_polygon(geo)
        #if polygon.area<=16*16*1000000:
        Mgcode = get_Spatialcode(Tile(geo).gcode,17)
        fp.write(str(id) + ":" + str(polygon)+":"+geo+":"+str(Mgcode))
        fp.write("\n")
        id = id+1
        #else:
        print(id)
    fp.close()

def test_Shenzhen_communities():
    with open("溪涌_polygon.txt", "r", encoding='utf-8') as f:
        lines = f.readlines()
    geosots = set()
    for line in lines[1:]:
        p = line.split("\t")[0]
        polygon = wkt.loads(p)
        geosots=geosots|polygon_to_geosots(polygon,14,False)
    fp = open("Test_Shenzhen_Polygons_溪涌.txt", "w")
    fp.write("ID:polygon:geo_string:geocode\n")
    id = 0
    for geo in geosots:
        polygon = geosot_to_polygon(geo)
        #if polygon.area<=16*16*1000000:
        Mgcode = get_Spatialcode(Tile(geo).gcode,14)
        fp.write(str(id) + ":" + str(polygon)+":"+geo+":"+str(Mgcode))
        fp.write("\n")
        id = id+1
        #else:
        print(id)
    fp.close()

def test_flood(target_level):
    with open("flood_distinctnode.txt","r",encoding="utf-8") as f:
        lines = f.readlines()
    fout = open("flood_disnode_target_level.txt","w",encoding="utf-8")
    for line in lines[1:]:
        flood_polygon = geosot_to_polygon(line.strip())
        geosots=polygon_to_geosots(flood_polygon,target_level,inner=True)
        # for geo in geosots:
        #     print(geosot_to_polygon(geo))
        flood_polygon1 = geosots_to_polygon(geosots)
        #print(flood_polygon1)
        flood_target_geosot_group = geosots_to_simple(geosots)
        fout.write(line.strip()+"\t"+str(flood_target_geosot_group))
        fout.write("\n")
    fout.close()

def output_flooded_grid():
    fout = open("flooded_nodetargt.txt", "w", encoding="utf-8")
    flooded_nodes=["G001130230-033311-31", "G001130230-122200-23", "G001130230-122200-22", "G001130230-122200-20",
     "G001130230-122202-10", "G001130230-210301-01", "G001130230-210301-00", "G001130230-210030-22",
     "G001130230-211112-10", "G001130230-211112-01", "G001130221-310202-32", "G001130221-310201-20",
     "G001130221-310201-02", "G001130221-310202-10", "G001130221-310201-22", "G001130221-310201-21",
     "G001130221-310202-30", "G001130221-310202-23", "G001130221-310202-21", "G001130221-310202-13",
     "G001130221-310202-12", "G001130221-310202-11", "G001130221-310110-00", "G001130221-310101-30",
     "G001130221-310101-23", "G001130221-310101-22", "G001130221-310101-21", "G001130221-310101-20",
     "G001130221-310101-13", "G001130221-310101-12", "G001130221-310102-11", "G001130221-310102-10",
     "G001130221-310102-03", "G001130221-310102-02", "G001130221-310102-01", "G001130221-310102-00",
     "G001130221-310102-20", "G001130221-310102-12", "G001130221-310103-00", "G001130221-310101-11",
     "G001130221-310100-33", "G001130221-310100-32", "G001130221-310100-31", "G001130230-201112-01",
     "G001130230-201101-30", "G001130221-132301-11", "G001130221-132230-03", "G001130221-132213-31",
     "G001130221-132231-22", "G001130221-132231-20", "G001130221-132230-33", "G001130221-132230-31",
     "G001130221-132300-13", "G001130221-132300-11", "G001130221-132213-33", "G001130230-210021-10",
     "G001130230-210021-01", "G001130230-210021-00", "G001130230-201112-13", "G001130230-201112-12",
     "G001130230-201112-10", "G001130230-201113-32", "G001130230-201113-30", "G001130230-201113-21",
     "G001130230-210002-22", "G001130230-210020-10", "G001130230-210020-01", "G001130230-210020-00",
     "G001130230-210003-23", "G001130230-210003-22", "G001130230-210002-33", "G001130230-210002-32",
     "G001130230-210002-23", "G001130221-303130-22", "G001130221-303123-10", "G001130221-303121-33",
     "G001130221-303121-31", "G001130221-303121-30", "G001130221-303121-13", "G001130221-303121-12",
     "G001130221-303121-11", "G001130221-303121-10", "G001130221-303123-32", "G001130221-303123-30",
     "G001130221-303123-13", "G001130221-303123-12", "G001130221-303123-11", "G001130221-303103-33",
     "G001130221-303103-32", "G001130221-310013-11", "G001130221-310013-10", "G001130221-310013-03",
     "G001130221-310013-02", "G001130221-310013-31", "G001130221-310013-13", "G001130221-310013-12",
     "G001130221-310012-13", "G001130221-310012-12", "G001130221-303301-31", "G001130221-303301-30",
     "G001130221-303301-12", "G001130221-303301-10", "G001130221-132323-33", "G001130221-132323-31",
     "G001130221-132323-30", "G001130221-132323-13", "G001130221-132323-12", "G001130221-132323-11",
     "G001130221-132323-10", "G001130221-132320-31", "G001130221-132320-30", "G001130221-132320-12",
     "G001130221-132320-03", "G001130221-132321-20", "G001130221-132323-01", "G001130221-132321-32",
     "G001130221-132321-23", "G001130221-132321-22", "G001130221-132310-13", "G001130221-132310-12",
     "G001130221-132310-03", "G001130221-132310-02", "G001130221-132310-01", "G001130221-132310-00",
     "G001130221-132310-31", "G001130221-132310-30", "G001130221-133233-00", "G001130221-133233-13",
     "G001130221-133233-12", "G001130221-133223-00", "G001130221-133222-30", "G001130221-133222-21",
     "G001130221-133223-20", "G001130221-133223-13", "G001130221-133223-12", "G001130221-133223-11",
     "G001130221-133223-10", "G001130221-133223-03", "G001130221-133223-02", "G001130221-133223-01",
     "G001130221-133232-01", "G001130221-133232-00", "G001130221-133223-31", "G001130221-133223-30",
     "G001130221-133223-21", "G001130221-133232-20", "G001130221-133232-12", "G001130221-133232-11",
     "G001130221-133232-10", "G001130221-133232-03", "G001130221-133232-02", "G001130221-133220-20",
     "G001130221-133222-00", "G001130221-133221-32", "G001130221-133221-23", "G001130221-133221-21",
     "G001130221-133220-32", "G001130221-133220-23", "G001130221-133220-22", "G001130221-133220-21",
     "G001130221-133222-13", "G001130221-133222-12", "G001130221-133222-11", "G001130221-133222-10",
     "G001130221-133222-03", "G001130221-133222-02", "G001130221-133222-01", "G001130221-132332-20",
     "G001130221-132332-02", "G001130221-132332-22", "G001130221-132332-21", "G001130230-033123-10",
     "G001130230-033130-22", "G001130230-022222-03", "G001130230-022222-02", "G001130221-310202-22",
     "G001130221-310012-30", "G001130221-133222-31", "G001130221-303123-33", "G001130221-133233-03",
     "G001130221-303123-31", "G001130230-201110-22", "G001130221-132311-20", "G001130221-310010-20",
     "G001130221-303301-13", "G001130221-310203-00", "G001130221-310201-03", "G001130221-303130-20",
     "G001130221-132332-23", "G001130230-033302-30", "G001130230-201101-33", "G001130221-310102-13",
     "G001130221-132230-01", "G001130221-310012-21", "G001130221-132310-21", "G001130221-133232-13",
     "G001130221-132332-00", "G001130230-022221-13", "G001130221-310220-01", "G001130221-310203-02",
     "G001130221-303132-00", "G001130221-310201-00", "G001130221-310010-21", "G001130221-132311-22",
     "G001130221-132333-11", "G001130221-310023-03", "G001130230-033300-11", "G001130221-132311-30",
     "G001130221-133200-22", "G001130221-132331-33", "G001130221-310012-31", "G001130221-133232-21",
     "G001130230-022230-02", "G001130221-303132-02", "G001130221-310010-23", "G001130221-133233-02",
     "G001130221-133202-03", "G001130221-303103-30", "G001130221-133202-01", "G001130221-133222-20",
     "G001130221-303310-02", "G001130221-310201-01", "G001130221-310202-31", "G001130221-303130-02",
     "G001130221-303310-00", "G001130221-310201-23", "G001130221-310220-00", "G001130221-310220-10",
     "G001130221-310101-31", "G001130221-310102-21", "G001130221-303130-00", "G001130221-303103-12",
     "G001130221-303110-00", "G001130221-310023-23", "G001130221-303310-20", "G001130221-303132-20",
     "G001130221-132320-00", "G001130221-132311-21", "G001130221-301331-23", "G001130221-301333-00",
     "G001130221-301332-23", "G001130221-133202-20", "G001130230-022222-12"]  # >3m
    # flooded_nodes=["G001130230-300212-10", "G001130230-211323-10", "G001130230-033311-31", "G001130230-033311-30",
    #  "G001130230-033300-11", "G001130230-033302-30", "G001130230-122200-23", "G001130230-122200-22",
    #  "G001130230-122200-20", "G001130230-122202-10", "G001130230-210301-01", "G001130230-210301-00",
    #  "G001130230-210301-13", "G001130230-210030-22", "G001130230-210033-23", "G001130230-210021-33",
    #  "G001130230-211112-11", "G001130230-211112-10", "G001130230-211112-01", "G001130230-211103-33",
    #  "G001130230-211030-02", "G001130221-310203-11", "G001130221-310203-03", "G001130221-310203-02",
    #  "G001130221-310203-01", "G001130221-310203-00", "G001130221-310202-32", "G001130221-310203-20",
    #  "G001130221-310201-00", "G001130221-310201-20", "G001130221-310201-13", "G001130221-310201-12",
    #  "G001130221-310201-11", "G001130221-310201-10", "G001130221-310201-03", "G001130221-310201-02",
    #  "G001130221-310201-01", "G001130221-310202-10", "G001130221-310201-32", "G001130221-310201-31",
    #  "G001130221-310201-30", "G001130221-310201-23", "G001130221-310201-22", "G001130221-310201-21",
    #  "G001130221-310202-31", "G001130221-310202-30", "G001130221-310202-23", "G001130221-310202-22",
    #  "G001130221-310202-21", "G001130221-310202-13", "G001130221-310202-12", "G001130221-310202-11",
    #  "G001130221-310220-01", "G001130221-310220-00", "G001130221-310220-11", "G001130221-310220-10",
    #  "G001130221-310220-03", "G001130221-310220-02", "G001130221-310110-02", "G001130221-310110-01",
    #  "G001130221-310110-00", "G001130221-310101-31", "G001130221-310101-30", "G001130221-310101-23",
    #  "G001130221-310101-22", "G001130221-310101-21", "G001130221-310101-20", "G001130221-310101-13",
    #  "G001130221-310101-12", "G001130221-310102-11", "G001130221-310102-10", "G001130221-310102-03",
    #  "G001130221-310102-02", "G001130221-310102-01", "G001130221-310102-00", "G001130221-310102-30",
    #  "G001130221-310102-21", "G001130221-310102-20", "G001130221-310102-13", "G001130221-310102-12",
    #  "G001130221-310103-01", "G001130221-310103-00", "G001130221-310101-11", "G001130221-310100-33",
    #  "G001130221-310100-32", "G001130221-310100-31", "G001130230-201101-33", "G001130230-201112-01",
    #  "G001130230-201110-22", "G001130230-201101-31", "G001130230-201101-30", "G001130221-132301-11",
    #  "G001130221-132301-10", "G001130221-132302-22", "G001130221-132001-20", "G001130221-132001-02",
    #  "G001130221-132001-00", "G001130221-132230-03", "G001130221-132230-01", "G001130221-310010-23",
    #  "G001130221-310010-22", "G001130221-310010-21", "G001130221-310010-20", "G001130221-132213-31",
    #  "G001130221-132232-10", "G001130221-132231-22", "G001130221-132231-20", "G001130221-132230-33",
    #  "G001130221-132230-32", "G001130221-132230-31", "G001130221-132300-13", "G001130221-132300-11",
    #  "G001130221-132213-33", "G001130230-210021-10", "G001130230-210021-01", "G001130230-210021-00",
    #  "G001130230-201112-13", "G001130230-201112-12", "G001130230-201112-10", "G001130230-201113-32",
    #  "G001130230-201113-30", "G001130230-201113-21", "G001130230-210002-22", "G001130230-210020-10",
    #  "G001130230-210020-01", "G001130230-210020-00", "G001130230-210003-23", "G001130230-210003-22",
    #  "G001130230-210002-33", "G001130230-210002-32", "G001130230-210002-23", "G001130230-022230-12",
    #  "G001130221-303130-20", "G001130221-303130-02", "G001130221-303130-22", "G001130221-303132-02",
    #  "G001130221-303132-01", "G001130221-303132-00", "G001130221-303123-10", "G001130221-303121-33",
    #  "G001130221-303121-31", "G001130221-303121-30", "G001130221-303121-13", "G001130221-303121-12",
    #  "G001130221-303121-11", "G001130221-303121-10", "G001130221-303130-00", "G001130221-303123-33",
    #  "G001130221-303123-32", "G001130221-303123-31", "G001130221-303123-30", "G001130221-303123-13",
    #  "G001130221-303123-12", "G001130221-303123-11", "G001130221-303112-22", "G001130221-301333-21",
    #  "G001130221-301333-03", "G001130221-303103-12", "G001130221-303101-13", "G001130221-303110-01",
    #  "G001130221-303110-00", "G001130221-303103-33", "G001130221-303103-32", "G001130221-303103-31",
    #  "G001130221-303103-30", "G001130221-310013-11", "G001130221-310013-10", "G001130221-310013-03",
    #  "G001130221-310013-02", "G001130221-310012-32", "G001130221-310012-31", "G001130221-310012-30",
    #  "G001130221-310013-31", "G001130221-310013-30", "G001130221-310013-21", "G001130221-310013-20",
    #  "G001130221-310013-13", "G001130221-310013-12", "G001130221-310023-12", "G001130221-310023-10",
    #  "G001130221-310023-03", "G001130221-310013-33", "G001130221-310030-01", "G001130221-310030-00",
    #  "G001130221-310023-23", "G001130221-310023-21", "G001130221-303331-12", "G001130221-303331-11",
    #  "G001130221-303331-10", "G001130221-310012-21", "G001130221-310012-13", "G001130221-310012-12",
    #  "G001130221-303310-20", "G001130221-303310-02", "G001130221-303310-22", "G001130221-303132-22",
    #  "G001130221-303132-20", "G001130221-303132-03", "G001130221-303310-00", "G001130221-303301-31",
    #  "G001130221-303301-30", "G001130221-303301-13", "G001130221-303301-12", "G001130221-303301-10",
    #  "G001130221-132323-33", "G001130221-132323-31", "G001130221-132323-30", "G001130221-132323-13",
    #  "G001130221-132323-12", "G001130221-132323-11", "G001130221-132323-10", "G001130221-132331-13",
    #  "G001130221-132331-11", "G001130221-132320-00", "G001130221-132320-31", "G001130221-132320-30",
    #  "G001130221-132320-12", "G001130221-132320-03", "G001130221-132321-20", "G001130221-132323-01",
    #  "G001130221-132321-32", "G001130221-132321-23", "G001130221-132321-22", "G001130221-132321-21",
    #  "G001130221-132311-33", "G001130221-132311-32", "G001130221-132311-30", "G001130221-132311-23",
    #  "G001130221-132311-22", "G001130221-132311-21", "G001130221-132313-01", "G001130221-132313-00",
    #  "G001130221-132310-13", "G001130221-132310-12", "G001130221-132310-03", "G001130221-132310-02",
    #  "G001130221-132310-01", "G001130221-132310-00", "G001130221-132311-20", "G001130221-132310-33",
    #  "G001130221-132310-32", "G001130221-132310-31", "G001130221-132310-30", "G001130221-132310-21",
    #  "G001130221-133233-02", "G001130221-133233-00", "G001130221-133232-30", "G001130221-133232-22",
    #  "G001130221-133233-13", "G001130221-133233-12", "G001130221-133233-03", "G001130221-301331-23",
    #  "G001130221-301331-13", "G001130221-301333-02", "G001130221-301333-01", "G001130221-301333-00",
    #  "G001130221-301332-32", "G001130221-301332-30", "G001130221-301332-23", "G001130221-301332-13",
    #  "G001130221-133223-00", "G001130221-133222-32", "G001130221-133222-31", "G001130221-133222-30",
    #  "G001130221-133222-21", "G001130221-133223-20", "G001130221-133223-13", "G001130221-133223-12",
    #  "G001130221-133223-11", "G001130221-133223-10", "G001130221-133223-03", "G001130221-133223-02",
    #  "G001130221-133223-01", "G001130221-133232-01", "G001130221-133232-00", "G001130221-133223-31",
    #  "G001130221-133223-30", "G001130221-133223-23", "G001130221-133223-21", "G001130221-133232-21",
    #  "G001130221-133232-20", "G001130221-133232-13", "G001130221-133232-12", "G001130221-133232-11",
    #  "G001130221-133232-10", "G001130221-133232-03", "G001130221-133232-02", "G001130221-133202-00",
    #  "G001130221-133200-22", "G001130221-133220-20", "G001130221-133220-02", "G001130221-133220-00",
    #  "G001130221-133202-22", "G001130221-133202-20", "G001130221-133202-03", "G001130221-133202-02",
    #  "G001130221-133202-01", "G001130221-133222-00", "G001130221-133221-32", "G001130221-133221-23",
    #  "G001130221-133221-21", "G001130221-133220-32", "G001130221-133220-23", "G001130221-133220-22",
    #  "G001130221-133220-21", "G001130221-133222-20", "G001130221-133222-13", "G001130221-133222-12",
    #  "G001130221-133222-11", "G001130221-133222-10", "G001130221-133222-03", "G001130221-133222-02",
    #  "G001130221-133222-01", "G001130221-132332-00", "G001130221-132331-33", "G001130221-132331-31",
    #  "G001130221-132332-20", "G001130221-132332-03", "G001130221-132332-02", "G001130221-132332-23",
    #  "G001130221-132332-22", "G001130221-132332-21", "G001130221-132333-13", "G001130221-132333-11",
    #  "G001130230-033123-10", "G001130230-033130-22", "G001130230-022222-12", "G001130230-022222-03",
    #  "G001130230-022222-02", "G001130230-022230-03", "G001130230-022230-02", "G001130230-022221-13",
    #  "G001130221-310203-10", "G001130221-310201-33", "G001130221-310023-30", "G001130221-132313-33",
    #  "G001130221-132313-31", "G001130221-132320-13", "G001130221-310101-32", "G001130221-303130-23",
    #  "G001130221-303310-03", "G001130221-301331-32", "G001130221-133223-32", "G001130221-310203-30",
    #  "G001130221-310203-21", "G001130221-303130-01", "G001130221-310021-33", "G001130221-303132-21",
    #  "G001130230-211330-23", "G001130230-210032-21", "G001130230-211112-00", "G001130230-211132-03",
    #  "G001130230-201112-02", "G001130221-310103-02", "G001130230-022230-10", "G001130221-303110-02",
    #  "G001130221-310021-31", "G001130221-132313-13", "G001130221-301331-30", "G001130221-133223-22",
    #  "G001130221-303110-10", "G001130221-303132-12", "G001130221-303132-10", "G001130221-303310-21",
    #  "G001130221-303312-01", "G001130230-211132-12", "G001130221-310220-12", "G001130221-310110-20",
    #  "G001130221-310012-33", "G001130221-133233-30", "G001130221-133233-21", "G001130230-022221-30",
    #  "G001130221-310030-10", "G001130221-310030-02", "G001130221-301333-20", "G001130221-310023-32",
    #  "G001130221-303310-01", "G001130221-303132-23", "G001130230-022221-31", "G001130221-310203-22",
    #  "G001130221-303130-30", "G001130221-303130-21", "G001130221-303111-01", "G001130221-301333-23",
    #  "G001130221-303101-31", "G001130221-301333-32", "G001130221-301333-30", "G001130221-303132-30",
    #  "G001130221-303130-10", "G001130221-303111-03", "G001130221-303111-00", "G001130221-303111-12",
    #  "G001130221-303132-31", "G001130230-211103-31", "G001130221-301333-12", "G001130221-301333-31",
    #  "G001130221-303130-13", "G001130221-303130-11", "G001130221-303130-03", "G001130221-303112-23",
    #  "G001130221-301333-10", "G001130221-301332-31", "G001130221-133222-23", "G001130221-310203-12",
    #  "G001130221-310210-02", "G001130221-310220-22", "G001130221-303130-12", "G001130221-301333-11",
    #  "G001130221-303103-11", "G001130221-301331-31", "G001130221-303132-11", "G001130221-303133-23",
    #  "G001130221-303133-20", "G001130221-303311-01", "G001130230-022222-13", "G001130221-303103-13",
    #  "G001130221-303110-03", "G001130221-303130-33", "G001130221-303131-23", "G001130221-303111-21",
    #  "G001130221-303112-33", "G001130221-303112-32", "G001130221-301333-13", "G001130221-303310-32",
    #  "G001130221-303312-10", "G001130221-303133-00", "G001130221-303132-33", "G001130221-303132-32",
    #  "G001130221-303310-33", "G001130221-303133-01", "G001130221-303133-22", "G001130221-310210-00",
    #  "G001130221-310220-20", "G001130221-303130-31", "G001130221-303131-22", "G001130221-303310-10",
    #  "G001130221-303310-30", "G001130221-303311-21", "G001130221-303311-20", "G001130221-303311-03",
    #  "G001130221-303311-23", "G001130230-210311-30", "G001130221-310102-22", "G001130221-133233-20",
    #  "G001130221-310210-20", "G001130221-310222-02", "G001130221-303112-30", "G001130221-303311-32",
    #  "G001130221-303112-13", "G001130221-303313-10", "G001130221-303311-00", "G001130221-303133-21",
    #  "G001130221-303313-01", "G001130230-210033-22", "G001130230-211110-33", "G001130230-211100-30",
    #  "G001130221-303311-30", "G001130221-303313-33", "G001130221-312202-22", "G001130221-310203-32",
    #  "G001130221-310203-23", "G001130221-310203-13", "G001130221-310220-21", "G001130221-310030-11",
    #  "G001130221-303111-10", "G001130221-303111-02", "G001130221-303112-21", "G001130221-303312-11",
    #  "G001130221-303310-12", "G001130221-303310-11", "G001130221-303132-13", "G001130221-310222-01",
    #  "G001130221-310222-00", "G001130221-310222-20", "G001130221-310222-03", "G001130221-310222-22",
    #  "G001130221-310220-13", "G001130221-310220-23", "G001130221-310101-33", "G001130221-310102-23",
    #  "G001130221-310030-13", "G001130221-310030-12", "G001130221-310030-31", "G001130221-303131-00",
    #  "G001130221-303131-21", "G001130221-303131-20", "G001130221-303131-03", "G001130221-303131-02",
    #  "G001130221-303113-02", "G001130221-303113-00", "G001130221-303113-22", "G001130221-303113-20",
    #  "G001130221-303110-33", "G001130221-303110-30", "G001130221-303111-30", "G001130221-303111-23",
    #  "G001130221-303111-22", "G001130221-303111-20", "G001130221-303111-13", "G001130221-303112-11",
    #  "G001130221-303112-03", "G001130221-303112-12", "G001130221-303101-33", "G001130221-303110-21",
    #  "G001130221-303110-13", "G001130221-303313-12", "G001130221-303313-11", "G001130221-303313-03",
    #  "G001130221-303313-02", "G001130221-303313-00", "G001130221-303331-00", "G001130221-303313-20",
    #  "G001130221-303313-13", "G001130221-303331-13", "G001130221-303310-13", "G001130221-303310-23",
    #  "G001130221-303311-12", "G001130221-303311-10", "G001130221-303311-02", "G001130221-303311-22",
    #  "G001130221-303133-02", "G001130221-303133-12", "G001130221-303133-10", "G001130221-303133-03",
    #  "G001130221-303133-30", "G001130221-312202-20", "G001130230-022230-11", "G001130230-022231-01",
    #  "G001130221-303331-01", "G001130221-303313-30", "G001130221-303313-23", "G001130221-303331-30",
    #  "G001130221-303331-03", "G001130221-303331-31", "G001130221-132331-12", "G001130221-132331-10",
    #  "G001130221-133232-31", "G001130221-133232-23", "G001130221-133233-31", "G001130221-132331-32",
    #  "G001130221-132333-10", "G001130230-022230-20", "G001130221-312220-01", "G001130221-312220-00",
    #  "G001130221-312202-23", "G001130221-312202-21", "G001130221-303331-32", "G001130221-312220-02",
    #  "G001130221-312202-02"]  #>0.15
    fout.write("ID:polygon:geo_string\n")
    i= 0
    for f in flooded_nodes:
        flood_polygon = geosot_to_polygon(f)
        i=i+1
        fout.write(str(i) + ":" + str(flood_polygon)+":"+f+":")
        fout.write("\n")
    fout.close()


def output_search_polygon():
    spatial_range = ('G001130221-12', {0: (1, 1), 1: (0, 1), 2: (1, 1)})
    spatial_range_group = simple_to_geosots(spatial_range)  # 查询范围的空间编码集合
    polygon = geosots_to_polygon(spatial_range_group)
    fout = open("search_polygon.txt", "w", encoding="utf-8")
    fout.write("ID:polygon:geo_string\n")
    i = 0
    fout.write("0:"+str(polygon)+ ":" + str(spatial_range))
    for f in spatial_range_group:
        polygon = geosot_to_polygon(f)
        i = i + 1
        fout.write(str(i) + ":" + str(polygon) + ":" + f )
        fout.write("\n")
    fout.close()


if __name__ == "__main__":
    #test_triangle()
    #test_landslide()
    #test_Shenzhen()
    #test_Shenzhen_distincts()
    output_flooded_grid()
    #output_search_polygon()
    #test_Shenzhen_communities()
    #test_building()
    #test_road()
    #test_flood(22)
